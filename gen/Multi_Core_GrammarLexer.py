# Generated from /home/saba/Git/Multi-core_DLS/Multi_Core_Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,127,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,80,8,8,1,9,4,9,83,8,9,11,9,12,9,84,1,10,
        1,10,5,10,89,8,10,10,10,12,10,92,9,10,1,11,3,11,95,8,11,1,11,1,11,
        1,11,5,11,100,8,11,10,11,12,11,103,9,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,4,14,115,8,14,11,14,12,14,116,1,14,1,14,
        1,15,3,15,122,8,15,1,15,1,15,1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,2,0,47,47,92,92,3,0,9,9,13,13,32,32,133,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,
        0,3,49,1,0,0,0,5,53,1,0,0,0,7,56,1,0,0,0,9,62,1,0,0,0,11,64,1,0,
        0,0,13,66,1,0,0,0,15,68,1,0,0,0,17,79,1,0,0,0,19,82,1,0,0,0,21,86,
        1,0,0,0,23,94,1,0,0,0,25,109,1,0,0,0,27,111,1,0,0,0,29,114,1,0,0,
        0,31,121,1,0,0,0,33,34,5,116,0,0,34,35,5,104,0,0,35,36,5,114,0,0,
        36,37,5,101,0,0,37,38,5,97,0,0,38,39,5,100,0,0,39,40,5,115,0,0,40,
        41,5,95,0,0,41,42,5,110,0,0,42,43,5,117,0,0,43,44,5,109,0,0,44,45,
        5,98,0,0,45,46,5,101,0,0,46,47,5,114,0,0,47,48,5,58,0,0,48,2,1,0,
        0,0,49,50,5,102,0,0,50,51,5,111,0,0,51,52,5,114,0,0,52,4,1,0,0,0,
        53,54,5,105,0,0,54,55,5,110,0,0,55,6,1,0,0,0,56,57,5,114,0,0,57,
        58,5,97,0,0,58,59,5,110,0,0,59,60,5,103,0,0,60,61,5,101,0,0,61,8,
        1,0,0,0,62,63,5,58,0,0,63,10,1,0,0,0,64,65,5,40,0,0,65,12,1,0,0,
        0,66,67,5,41,0,0,67,14,1,0,0,0,68,69,5,44,0,0,69,16,1,0,0,0,70,71,
        5,116,0,0,71,72,5,114,0,0,72,73,5,117,0,0,73,80,5,101,0,0,74,75,
        5,102,0,0,75,76,5,97,0,0,76,77,5,108,0,0,77,78,5,115,0,0,78,80,5,
        101,0,0,79,70,1,0,0,0,79,74,1,0,0,0,80,18,1,0,0,0,81,83,7,0,0,0,
        82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,20,1,
        0,0,0,86,90,7,1,0,0,87,89,7,2,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,
        88,1,0,0,0,90,91,1,0,0,0,91,22,1,0,0,0,92,90,1,0,0,0,93,95,7,3,0,
        0,94,93,1,0,0,0,94,95,1,0,0,0,95,101,1,0,0,0,96,97,3,21,10,0,97,
        98,7,3,0,0,98,100,1,0,0,0,99,96,1,0,0,0,100,103,1,0,0,0,101,99,1,
        0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,3,
        21,10,0,105,106,5,46,0,0,106,107,5,112,0,0,107,108,5,121,0,0,108,
        24,1,0,0,0,109,110,5,46,0,0,110,26,1,0,0,0,111,112,5,9,0,0,112,28,
        1,0,0,0,113,115,7,4,0,0,114,113,1,0,0,0,115,116,1,0,0,0,116,114,
        1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,119,6,14,0,0,119,30,
        1,0,0,0,120,122,5,13,0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,
        1,0,0,0,123,124,5,10,0,0,124,125,1,0,0,0,125,126,6,15,0,0,126,32,
        1,0,0,0,8,0,79,84,90,94,101,116,121,1,6,0,0
    ]

class Multi_Core_GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    FOR = 2
    IN = 3
    RANGE = 4
    COLON = 5
    LPAREN = 6
    RPAREN = 7
    COMMA = 8
    BOOLEAN = 9
    INTEGER = 10
    IDENTIFIER = 11
    FILEPATH = 12
    DOT = 13
    INDENT = 14
    WS = 15
    NEWLINE = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'threads_number:'", "'for'", "'in'", "'range'", "':'", "'('", 
            "')'", "','", "'.'", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "FOR", "IN", "RANGE", "COLON", "LPAREN", "RPAREN", "COMMA", 
            "BOOLEAN", "INTEGER", "IDENTIFIER", "FILEPATH", "DOT", "INDENT", 
            "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "FOR", "IN", "RANGE", "COLON", "LPAREN", "RPAREN", 
                  "COMMA", "BOOLEAN", "INTEGER", "IDENTIFIER", "FILEPATH", 
                  "DOT", "INDENT", "WS", "NEWLINE" ]

    grammarFileName = "Multi_Core_Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


